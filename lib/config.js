// Generated by LiveScript 1.2.0
var ToolShed, ref$, Debug, EventEmitter, _, DaFunk, Fs, Path, Config, out$ = typeof exports != 'undefined' && exports || this;
ref$ = ToolShed = require('./toolshed'), Debug = ref$.Debug, EventEmitter = ref$.EventEmitter, _ = ref$._;
DaFunk = require('./da_funk');
Fs = require('fs');
Path = require('path');
Config = function(path, initial_obj, opts, save_fn){
  var debug, WeakMap, Proxy, Reflect, ee, config, written_json_str, iid, save, make_reflective;
  debug = Debug('config:' + path);
  WeakMap = global.WeakMap;
  Proxy = global.Proxy;
  Reflect = global.Reflect;
  if (typeof WeakMap === 'undefined') {
    global.WeakMap = WeakMap = require('es6-collections').WeakMap;
  }
  if (typeof Proxy === 'undefined' && !process.versions['node-webkit']) {
    debug("!!!!!!! installing node-proxy cheat...");
    global.Proxy = Proxy = require('node-proxy');
  }
  if (typeof Reflect === 'undefined') {
    require('harmony-reflect');
    Reflect = global.Reflect;
    Proxy = global.Proxy;
  }
  ee = new EventEmitter;
  if (typeof initial_obj === 'function') {
    opts = {
      watch: true
    };
    save_fn = initial_obj;
  } else if (typeof opts === 'function') {
    save_fn = opts;
    opts = {
      watch: true
    };
  }
  if (typeof opts === 'undefined') {
    opts = {
      watch: true
    };
  }
  iid = false;
  save = function(){
    var clear_interval;
    clear_interval = function(){
      if (!Config._saving[path]) {
        clearInterval(iid);
        return iid = false;
      }
    };
    Config._saving[path]++;
    if (iid === false) {
      return iid = setInterval(function(){
        var obj, json_str;
        obj = config;
        json_str = opts.ugly
          ? JSON.stringify(obj)
          : DaFunk.stringify(obj, DaFunk.stringify.desired_order(path));
        if (json_str !== written_json_str) {
          Fs.writeFile(path, json_str, function(err){
            var dirname;
            if (err) {
              if (err.code === 'ENOENT') {
                dirname = Path.dirname(path);
                ToolShed.mkdir(dirname, function(err){
                  if (err) {
                    return ee.emit('error', err);
                  } else {
                    return save();
                  }
                });
              } else {
                ee.emit('error', err);
              }
            } else {
              written_json_str = json_str;
              if (typeof save_fn === 'function') {
                save_fn(obj);
              }
              ee.emit('save', obj, path, json_str);
            }
            return clear_interval();
          });
        } else {
          clear_interval();
        }
        return Config._saving[path] = 0;
      }, 500);
    }
  };
  make_reflective = function(o, oon){
    var oo, reflective, k, v;
    oo = Array.isArray(o)
      ? []
      : {};
    reflective = Proxy(oo, {
      enumerable: true,
      enumerate: function(obj){
        return Object.keys(oo);
      },
      hasOwn: function(obj, key){
        return typeof oo[key] !== 'undefined';
      },
      keys: function(){
        return Object.keys(oo);
      },
      get: function(obj, name){
        var v, args, body;
        if (name === 'toJSON') {
          return function(){
            return oo;
          };
        } else if (name === 'inspect') {
          return function(){
            return require('util').inspect(oo);
          };
        } else if ((v = oo[name]) === null && oo[name + '.js']) {
          v = oo[name + '.js'];
          args = v.match(/function \((.*)\)/);
          body = v.substring(1 + v.indexOf('{'), v.lastIndexOf('}'));
          return oo[name] = Function(args[1], body);
        } else if (typeof v !== 'undefined') {
          return v;
        } else if (oon.length === 0) {
          return ee[name];
        }
      },
      set: function(obj, name, val){
        var prev_val, prop;
        prev_val = oo[name];
        if ((typeof val === 'object' && !_.isEqual(oo[name], val)) || oo[name] !== val) {
          prop = oon ? oon + "." + name : name;
          if (typeof val === 'object' && val !== null) {
            val = make_reflective(val, prop);
          }
          oo[name] = val;
          ee.emit('set', prop, val, prev_val);
          save();
        }
        return val;
      }
    });
    for (k in o) {
      v = o[k];
      oo[k] = v;
    }
    return reflective;
  };
  Config._[path] = config = make_reflective({}, '', ee);
  Fs.readFile(path, 'utf-8', function(err, data){
    var is_new, _config, e;
    is_new = false;
    if (err) {
      if (err.code === 'ENOENT') {
        config.emit('new');
        is_new = true;
      } else {
        config.emit('error', e);
      }
    } else {
      try {
        _config = JSON.parse(data);
        written_json_str = data;
        _.each(_config, function(v, k){
          return Config._[path][k] = v;
        });
      } catch (e$) {
        e = e$;
        config.emit('error', e.stack);
      }
    }
    if (initial_obj) {
      DaFunk.merge(config, initial_obj);
    }
    if (data) {
      return config.emit('ready', config, data);
    } else if (Config._saving[path]) {
      return config.once('save', function(){
        debug("saved data ready");
        return config.emit('ready', config, data);
      });
    } else {
      return config.emit('ready', config, data);
    }
  });
  return config;
};
Config._saving = {};
Config._ = {};
out$.Config = Config;