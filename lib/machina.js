// Generated by LiveScript 1.2.0
var ToolShed, ref$, Fsm, Fabuloso, collective, pipeline, Machina, out$ = typeof exports != 'undefined' && exports || this;
ToolShed = require('./toolshed');
ref$ = require('./fsm'), Fsm = ref$.Fsm, Fabuloso = ref$.Fabuloso, collective = ref$.collective, pipeline = ref$.pipeline;
Machina = (function(superclass){
  var prototype = extend$((import$(Machina, superclass).displayName = 'Machina', Machina), superclass).prototype, constructor = Machina;
  function Machina(name){
    this.fsms = [];
    ToolShed.extend(this, Fabuloso);
    Machina.superclass.call(this, "Machina");
  }
  prototype.eventListeners = {
    'Fsm:added': function(fsm){
      return this.fsms.push(fsm);
    }
  };
  prototype.states = {
    uninitialized: {
      onenter: function(){
        return this.transition('ready');
      }
    },
    ready: {
      onenter: function(){
        return this.debug("machina ready!");
      }
    }
  };
  return Machina;
}(Fsm));
Machina.pipeline = pipeline;
out$.Machina = Machina;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}